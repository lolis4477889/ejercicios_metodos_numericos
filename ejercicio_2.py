# -*- coding: utf-8 -*-
"""Ejercicio_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c4YqKypKlwr9SLoeb2dwp22UwNB56VqD
"""

# @title Texto de título predeterminado
#   Codigo que implementa un esquema numerico  para determinar la aproximacion de Leibniz
#
#           Autor:
#   Angel Gilberto Carbajal Lopez
#   carbajalsecundaria@gmail.com
#   Version 2.0 : 04/02/2025
#

import numpy as np
import matplotlib.pyplot as plt

def leibniz_pi(n):   # Definimos la función que calcula una aproximación de π
    return 4 * sum((-1)**k / (2*k + 1) for k in range(n))


true_pi = np.pi  # Se almacena el valor real de π proporcionado por numpy
N_values = [10, 100, 1000, 10000]  # Lista con diferentes cantidades de términos de la serie para la aproximación
errors_abs = []  # Lista vacía para guardar los errores absolutos
errors_rel = []  # Lista vacía para guardar los errores relativos
errors_cua = []  # Lista vacía para almacenar los errores cuadráticos


for N in N_values:
    approx_pi = leibniz_pi(N)  # Se obtiene la aproximación de π con N términos
    error_abs = abs(true_pi - approx_pi)  # Se calcula el error absoluto como la diferencia entre el valor real y la aproximación
    error_rel = error_abs / true_pi  # Se obtiene el error relativo dividiendo el error absoluto entre el valor real
    error_cua = error_abs**2  # Se determina el error cuadrático elevando al cuadrado el error absoluto
    errors_abs.append(error_abs)  # Se almacena el error absoluto en la lista correspondiente
    errors_rel.append(error_rel)  # Se guarda el error relativo
    errors_cua.append(error_cua)  # Se registra el error cuadrático
    print(f"N={N}: Error absoluto={error_abs}, Error relativo={error_rel}, Error cuadrático={error_cua}")  # Se muestran los errores calculados para cada N


plt.figure()  # Se crea una nueva figura para la gráfica
plt.plot(N_values, errors_abs, label='Error absoluto', marker='o')  # Se grafica el error absoluto con marcadores circulares
plt.plot(N_values, errors_rel, label='Error relativo', marker='s')  # Se grafica el error relativo con marcadores cuadrados
plt.plot(N_values, errors_cua, label='Error cuadrático', marker='^')  # Se grafica el error cuadrático con marcadores triangulares
plt.xscale('log')  # Se establece la escala logarítmica en el eje X
plt.yscale('log')  # Se establece la escala logarítmica en el eje Y
plt.xlabel('N')  # Se etiqueta el eje X
plt.ylabel('Error')  # Se etiqueta el eje Y
plt.legend()  # Se añade la leyenda para identificar las curvas
plt.title('Errores en la aproximación de π')  # Se asigna el título a la gráfica
plt.show()  # Se muestra la gráfica